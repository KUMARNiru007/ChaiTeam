generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  name             String
  email            String           @unique
  role             userRole         @default(USER)
  createdAT        DateTime         @default(now())
  updatedAT        DateTime         @updatedAt
  accessToken      String?
  image            String?
  isVerified       Boolean          @default(true)
  refreshToken     String?
  provider         String?
  isInGroup        Boolean          @default(false)
  groupMember      GroupMember?
  groupsLeader     Groups?          @relation("GroupLeader")
  joinApplications JoinApplication?
  noticeCreated    Notices[]
  activity         UserActivity[]
}

model Batch {
  id           String        @id @default(uuid())
  name         String
  createdAT    DateTime      @default(now())
  updatedAT    DateTime      @updatedAt
  status       status        @default(ACTIVE)
  description  String?
  batchMembers BatchMember[]
  groups       Groups[]
  notices      Notices[]
}

model BatchMember {
  id        String   @id @default(uuid())
  batchId   String
  email     String
  name      String
  createdAT DateTime @default(now())
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, email])
}

model Groups {
  id               String            @id @default(uuid())
  name             String
  description      String?
  tags             Json?
  leader_id        String            @unique
  createdAT        DateTime          @default(now())
  updatedAT        DateTime          @updatedAt
  disbanded_at     DateTime?
  disbanded_reason String?
  visible_to_users Boolean           @default(true)
  status           groupStatus       @default(ACTIVE)
  batchId          String
  batchName        String
  capacity         Int
  groupActivity    GroupActivity[]
  member           GroupMember[]
  batch            Batch             @relation(fields: [batchId], references: [id])
  leader           User              @relation("GroupLeader", fields: [leader_id], references: [id])
  joinApplications JoinApplication[]
  notices          Notices[]
}

model GroupMember {
  id      String          @id @default(uuid())
  userId  String          @unique
  groupId String
  name    String
  email   String
  role    groupMemberRole
  group   Groups          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id])
}

model JoinApplication {
  id        String            @id @default(uuid())
  userId    String            @unique
  groupId   String
  reason    String
  status    applicationStatus @default(PENDING)
  createdAT DateTime          @default(now())
  updatedAT DateTime          @updatedAt
  email     String
  name      String
  group     Groups            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id])
}

model Notices {
  id          String      @id @default(uuid())
  title       String
  content     String
  scope       noticeScope @default(GROUP)
  createdById String
  groupId     String?
  batchId     String?
  isEdited    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  type        noticeType  @default(NORMAL)
  batch       Batch?      @relation(fields: [batchId], references: [id], onDelete: Cascade)
  createdBy   User        @relation(fields: [createdById], references: [id])
  group       Groups?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id          String           @id @default(uuid())
  userId      String
  action      userActivityType
  description String?
  creatdAT    DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupActivity {
  id          String           @id @default(uuid())
  groupId     String
  action      gropActivityType
  description String?
  createAT    DateTime         @default(now())
  group       Groups           @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

enum userRole {
  USER
  ADMIN
  LEADER
}

enum groupMemberRole {
  LEADER
  MEMBER
}

enum status {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum groupStatus {
  ACTIVE
  INACTIVE
  PRIVATE
  FULL
  DISBANNED
}

enum applicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum noticeScope {
  GROUP
  BATCH
  GLOBAL
}

enum userActivityType {
  ACCOUNT_CREATED
  ACCOUNT_DELTED
  APPLIED_TO_JOIN_GROUP
  APLICATION_WITHDRAWN
  JOINED_GROUP
  LEAVED_GROUP
  KICKED_FROM_GROUP
  CREATED_GROUP
  DISBANNED_GROUP
  PROFILE_UPDATED
}

enum gropActivityType {
  GROUP_CREATED
  GROUP_UPDATED
  GROUP_DISBANDED
  MEMBER_JOINED
  MEMBER_LEFT
  NOTICE_CREATED
  NOTICE_UPDATED
  NOTICE_DELETED
  MEMBER_KICKED
}

enum noticeType {
  NORMAL
  PINNED
}
