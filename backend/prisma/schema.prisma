// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  USER
  ADMIN
  LEADER
}

enum groupMemberRole {
  LEADER
  MEMBER
}

enum status {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum groupStatus {
  ACTIVE
  INACTIVE
  PRIVATE
  FULL
  DISBANNED
}

enum applicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum noticeScope {
  GROUP
  BATCH
  GLOBAL
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  image        String?
  isVerified   Boolean  @default(true)
  role         userRole @default(USER)
  isInGroup    Boolean  @default(false)
  provider     String?
  accessToken  String?
  refreshToken String?
  createdAT    DateTime @default(now())
  updatedAT    DateTime @updatedAt

  // Relations
  groupsLeader     Groups[]          @relation("GroupLeader")
  groupMember      GroupMember?
  joinApplications JoinApplication[]
  noticeCreated    Notices[]
}

model Batch {
  id          String  @id @default(uuid())
  name        String
  description String?
  status      status  @default(ACTIVE)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  // Relations
  groups       Groups[]
  batchMembers BatchMember[]
  notices      Notices[]
}

model BatchMember {
  id      String @id @default(uuid())
  name    String
  email   String
  batchId String

  createdAT DateTime @default(now())

  // Relations 
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, email]) // It ensure there i single user from one email in each batch
}

model Groups {
  id               String      @id @default(uuid())
  name             String
  description      String?
  tags             Json?
  batchId          String
  batchName        String
  capacity         Int
  leader_id        String      @unique
  createdAT        DateTime    @default(now())
  updatedAT        DateTime    @updatedAt
  status           groupStatus @default(ACTIVE)
  disbanded_at     DateTime?
  disbanded_reason String?
  visible_to_users Boolean     @default(true)

  // Relations
  batch            Batch             @relation(fields: [batchId], references: [id])
  leader           User              @relation("GroupLeader", fields: [leader_id], references: [id])
  member           GroupMember[]
  joinApplications JoinApplication[]
  notices          Notices[]
}

model GroupMember {
  id      String          @id @default(uuid())
  userId  String          @unique
  groupId String
  name    String
  email   String
  role    groupMemberRole

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  group Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model JoinApplication {
  id        String            @id @default(uuid())
  userId    String            @unique
  groupId   String
  name      String
  email     String
  reason    String
  status    applicationStatus @default(PENDING)
  createdAT DateTime          @default(now())
  updatedAT DateTime          @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  group Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Notices {
  id          String      @id @default(uuid())
  title       String
  content     String
  scope       noticeScope @default(GROUP)
  createdById String
  groupId     String?
  batchId     String?
  isEdited    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt

  // Relations
  createdBy User    @relation(fields: [createdById], references: [id])
  group     Groups? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  batch     Batch?  @relation(fields: [batchId], references: [id], onDelete: Cascade)
}
