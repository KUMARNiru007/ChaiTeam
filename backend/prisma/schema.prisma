// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  USER
  ADMIN
}

enum status {
  ACTIVE
  INACTIVE
  COMPLETED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  image        String?
  isVerified   Boolean  @default(true)
  role         userRole @default(USER)
  provider     String?
  accessToken  String?
  refreshToken String?
  createdAT    DateTime @default(now())
  updatedAT    DateTime @updatedAt

  // Relations
  groupsLeader Groups[] @relation("GroupLeader")
}

model Batch {
  id          String  @id @default(uuid())
  name        String
  description String?
  status      status  @default(ACTIVE)

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  // Relations
  groups       Groups[]
  batchMembers BatchMember[]
}

model BatchMember {
  id      String @id @default(uuid())
  name    String
  email   String
  batchId String

  createdAT DateTime @default(now())

  // Relations 
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, email]) // It ensure there i single user from one email in each batch
}

model Groups {
  id               String    @id @default(uuid())
  name             String
  description      String?
  tags             Json?
  batch_id         String
  leader_id        String
  createdAT        DateTime  @default(now())
  updatedAT        DateTime  @updatedAt
  status           status    @default(ACTIVE)
  disbanded_at     DateTime?
  disbanded_reason String?
  visible_to_users Boolean   @default(true)

  // Relations
  batch  Batch @relation(fields: [batch_id], references: [id])
  leader User  @relation("GroupLeader", fields: [leader_id], references: [id])
}
